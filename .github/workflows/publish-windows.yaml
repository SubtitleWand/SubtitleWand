name: publish-windows

on:
  push:
    branches:    
      - ci-cd-publish-windows/**

env:
  flutter_channel: 'beta'
  flutter_version: '1.22.0-12.4.pre'
  GO111MODULE: 'on'

jobs:
  # Analyze and test each core package.
  publish-windows:
    # if: github.actor == github.event.repository.owner.login
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        folder: ['.']
        os: [windows-latest]
        include:
          - os: windows-latest
            flutter_path: C:\hostedtoolcache\flutter
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Cache Flutter dependencies
        uses: actions/cache@v1
        with:
          path: ${{ matrix.flutter_path }}
          key: ${{ runner.OS }}-flutter-cache-${{ env.flutter_version }}
          restore-keys: |
            ${{ runner.OS }}-flutter-cache-
      - name: Cache Golang dependencies
        uses: actions/cache@v1
        with:
          path: C:\go\pkg\mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - uses: subosito/flutter-action@v1
        with:
          channel: ${{ env.flutter_channel }}
          flutter-version: ${{ env.flutter_version }}
      - uses: actions/setup-go@v2
        with:
          go-version: '1.13.3' # The Go version to download (if necessary) and use.
      - run: |
          go version
      # - name: Set Golang Enviroments
      #   run: echo ::set-env name=GOPATH::$(go env GOPATH)
      - name: Build exectuables
        env:
          FLUTTER_DART_HOME: ${{ env.FLUTTER_HOME }}/bin/cache/dart-sdk/bin
        run: |
          flutter doctor
          echo $(go env GOPATH)/bin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo $FLUTTER_DART_HOME | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          go get -v -u github.com/go-flutter-desktop/hover
          hover build windows
          rm go/build/outputs/windows/flutter_engine.pdb -fo
        # sudo apt-get install build-essential libgl1-mesa-dev 
        # sudo apt-get install gcc libc6-dev
        # sudo apt-get install libgl1-mesa-dev xorg-dev
        # export PATH=$PATH:$FLUTTER_DART_HOME
      - uses: actions/upload-artifact@v1
        with:
          name: windows
          path: go/build/outputs/windows